{"version":3,"file":"RolesApi-C49UzPy3.js","sources":["../../src/app/main/pages/settings/constants/defaultValues.ts","../../src/app/main/pages/settings/tabs/user-categories/UserCategoriesApi.tsx","../../src/app/main/features/roles/RolesApi.ts"],"sourcesContent":["export const BUSINESS_AREA = 'Operations';\n","import { apiService as api } from \"app/store/apiService\";\nimport { ITableUserCategories, ITableUserCategoriesArg, IUserCategory, IUserCategorysEssentials } from \"./UserCategoriesModel\";\n\nexport const addTagTypes = [\"userCategories/fetchAll\", \"userCategories/fetchOne\"] as const;\n\nconst UserCategoriesApi = api.enhanceEndpoints({ addTagTypes }).injectEndpoints({\n\tendpoints: (build) => ({\n\t\tgetAllUserCategories: build.query<GetUserCategoriesApiResponse, GetUserCategoriesApiArg>({\n\t\t\tquery: ({ businessId, page, pageSize, sortBy, sortOrder, filter }) => {\n\t\t\t\tlet params = \"?\";\n\n\t\t\t\tif (page) params += `page=${page}&`;\n\t\t\t\tif (pageSize) params += `pageSize=${pageSize}&`;\n\t\t\t\tif (sortBy) params += `sortBy=${sortBy}&`;\n\t\t\t\tif (sortOrder) params += `sortOrder=${sortOrder}&`;\n\t\t\t\tif (filter) params += `filter=${filter}`;\n\n\t\t\t\treturn {\n\t\t\t\t\turl: `/settings/getusercategories/${businessId}${params}`\n\t\t\t\t};\n\t\t\t},\n\t\t\tprovidesTags: [\"userCategories/fetchAll\"]\n\t\t}),\n\t\tgetOneUserCategory: build.query<GetUserCategoryApiResponse, GetUserCategoryApiArg>({\n\t\t\tquery: (userCategoryId) => ({\n\t\t\t\turl: `/settings/getusercategoriesbyid/${userCategoryId}`\n\t\t\t}),\n\t\t\tprovidesTags: [\"userCategories/fetchOne\"]\n\t\t}),\n\t\tpostUserCategory: build.mutation<PostUserCategoryApiResponse, PostUserCategoryApiArg>({\n\t\t\tquery: (queryArg) => ({\n\t\t\t\turl: `/settings/addusercategories`,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tdata: queryArg\n\t\t\t}),\n\t\t\tinvalidatesTags: [\"userCategories/fetchAll\"]\n\t\t}),\n\t\tputUserCategory: build.mutation<PutUserCategoryApiResponse, PutUserCategoryApiArg>({\n\t\t\tquery: (queryArg) => ({\n\t\t\t\turl: `/settings/updateusercategories`,\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\tdata: queryArg\n\t\t\t}),\n\t\t\tinvalidatesTags: [\"userCategories/fetchAll\", \"userCategories/fetchOne\"]\n\t\t}),\n\t\tdeleteUserCategory: build.mutation<void, DeleteUserCategoryApiArg>({\n\t\t\tquery: (userCategoryId) => ({\n\t\t\t\turl: `/settings/deleteusercategories/${userCategoryId}`,\n\t\t\t\tmethod: \"DELETE\"\n\t\t\t}),\n\t\t\tinvalidatesTags: [\"userCategories/fetchAll\"]\n\t\t})\n\t})\n});\n\nexport default UserCategoriesApi;\n\nexport type GetUserCategoriesApiArg = ITableUserCategoriesArg;\nexport type GetUserCategoriesApiResponse = ITableUserCategories;\nexport type GetUserCategoryApiArg = string;\nexport type GetUserCategoryApiResponse = IUserCategory;\nexport type PostUserCategoryApiArg = IUserCategorysEssentials;\nexport type PostUserCategoryApiResponse = boolean;\nexport type PutUserCategoryApiArg = IUserCategory;\nexport type PutUserCategoryApiResponse = boolean;\nexport type DeleteUserCategoryApiArg = string;\n\nexport const { useGetAllUserCategoriesQuery, useGetOneUserCategoryQuery, usePostUserCategoryMutation, usePutUserCategoryMutation, useDeleteUserCategoryMutation } = UserCategoriesApi;\n\nexport type UserCategoriesApiType = {\n\t[UserCategoriesApi.reducerPath]: ReturnType<typeof UserCategoriesApi.reducer>;\n};\n","import { apiService as api } from \"app/store/apiService\";\nimport { IRoles } from \"./RolesModel\";\n\nexport const addTagTypes = [\"roles/fetchAll\"] as const;\n\nconst RolesApi = api.enhanceEndpoints({ addTagTypes }).injectEndpoints({\n\tendpoints: (build) => ({\n\t\tgetAllRoles: build.query<GetRolesApiResponse, void>({\n\t\t\tquery: () => {\n\t\t\t\treturn {\n\t\t\t\t\turl: \"/settings/getroles\"\n\t\t\t\t};\n\t\t\t},\n\t\t\tprovidesTags: [\"roles/fetchAll\"]\n\t\t})\n\t})\n});\n\nexport default RolesApi;\n\nexport type GetRolesApiResponse = Array<IRoles>;\n\nexport const { useGetAllRolesQuery } = RolesApi;\n\nexport type RolesApiType = {\n\t[RolesApi.reducerPath]: ReturnType<typeof RolesApi.reducer>;\n};\n"],"names":["BUSINESS_AREA","addTagTypes","UserCategoriesApi","api","build","businessId","page","pageSize","sortBy","sortOrder","filter","params","userCategoryId","queryArg","useGetAllUserCategoriesQuery","useGetOneUserCategoryQuery","usePostUserCategoryMutation","usePutUserCategoryMutation","useDeleteUserCategoryMutation","RolesApi","useGetAllRolesQuery"],"mappings":"+VAAO,MAAMA,EAAgB,aCGhBC,EAAc,CAAC,0BAA2B,yBAAyB,EAE1EC,EAAoBC,EAAI,iBAAiB,CAAEF,YAAAA,CAAa,CAAA,EAAE,gBAAgB,CAC/E,UAAYG,IAAW,CACtB,qBAAsBA,EAAM,MAA6D,CACxF,MAAO,CAAC,CAAE,WAAAC,EAAY,KAAAC,EAAM,SAAAC,EAAU,OAAAC,EAAQ,UAAAC,EAAW,OAAAC,KAAa,CACrE,IAAIC,EAAS,IAET,OAAAL,IAAMK,GAAU,QAAQL,CAAI,KAC5BC,IAAUI,GAAU,YAAYJ,CAAQ,KACxCC,IAAQG,GAAU,UAAUH,CAAM,KAClCC,IAAWE,GAAU,aAAaF,CAAS,KAC3CC,IAAQC,GAAU,UAAUD,CAAM,IAE/B,CACN,IAAK,+BAA+BL,CAAU,GAAGM,CAAM,EAAA,CAEzD,EACA,aAAc,CAAC,yBAAyB,CAAA,CACxC,EACD,mBAAoBP,EAAM,MAAyD,CAClF,MAAQQ,IAAoB,CAC3B,IAAK,mCAAmCA,CAAc,EAAA,GAEvD,aAAc,CAAC,yBAAyB,CAAA,CACxC,EACD,iBAAkBR,EAAM,SAA8D,CACrF,MAAQS,IAAc,CACrB,IAAK,8BACL,OAAQ,OACR,KAAMA,CAAA,GAEP,gBAAiB,CAAC,yBAAyB,CAAA,CAC3C,EACD,gBAAiBT,EAAM,SAA4D,CAClF,MAAQS,IAAc,CACrB,IAAK,iCACL,OAAQ,MACR,KAAMA,CAAA,GAEP,gBAAiB,CAAC,0BAA2B,yBAAyB,CAAA,CACtE,EACD,mBAAoBT,EAAM,SAAyC,CAClE,MAAQQ,IAAoB,CAC3B,IAAK,kCAAkCA,CAAc,GACrD,OAAQ,QAAA,GAET,gBAAiB,CAAC,yBAAyB,CAAA,CAC3C,CAAA,EAEH,CAAC,EAcY,CAAE,6BAAAE,EAA8B,2BAAAC,EAA4B,4BAAAC,EAA6B,2BAAAC,EAA4B,8BAAAC,GAAkChB,EChEvJD,EAAc,CAAC,gBAAgB,EAEtCkB,EAAWhB,EAAI,iBAAiB,CAAE,YAAAF,CAAa,CAAA,EAAE,gBAAgB,CACtE,UAAYG,IAAW,CACtB,YAAaA,EAAM,MAAiC,CACnD,MAAO,KACC,CACN,IAAK,oBAAA,GAGP,aAAc,CAAC,gBAAgB,CAAA,CAC/B,CAAA,EAEH,CAAC,EAMY,CAAE,oBAAAgB,GAAwBD"}